<?php

namespace Tests\Feature;

use App\Models\Vulnerability;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class VulnerabilityTest extends TestCase
{
    use RefreshDatabase;

    protected Vulnerability $vulnerability;

    public function setUp(): void
    {
        parent::setUp();

        $this->withHeaders([
            'Accept' => 'application/json',
        ]);

        $this->vulnerability = Vulnerability::factory()->create();
    }

    /**
     * Vulnerability listing test.
     *
     * @return void
     */
    public function test_list_vulnerability()
    {
        $response = $this->get(route('vulnerability.index'));

        $response->assertOk();
    }

    /**
     * Vulnerability create new one test.
     *
     * @return void
     */
    public function test_create_vulnerability()
    {
        $data = [
            'title' => 'A01:2021-Broken Access Control',
            'description' => 'testing desc',
            'priority' => 5
        ];

        $response = $this->post(route('vulnerability.store'), $data);

        $this->assertDatabaseHas('vulnerabilities', $data);

        $response->assertCreated();
    }

    /**
     * Vulnerability create new one test.
     *
     * @return void
     */
    public function test_validation_check_vulnerability()
    {
        $data = [
            'title' => 123123,
            'priority' => '1'
        ];

        $response = $this->post(route('vulnerability.store'), $data);

        $response->assertUnprocessable();
    }

    /**
     * Vulnerability create new one test.
     *
     * @return void
     */
    public function test_update_vulnerability()
    {
        $data = [
            'title' => 'A01:2021-Broken Access Control',
            'description' => 'testing desc',
            'priority' => 5
        ];

        $response = $this->put(route('vulnerability.update', [
            'vulnerability' => $this->vulnerability->id
        ]), $data);

        $data['id'] = $this->vulnerability->id;

        $this->assertDatabaseHas('vulnerabilities', $data);

        $response->assertOk();
    }

    /**
     * Vulnerability delete test.
     *
     * @return void
     */
    public function test_delete_vulnerability()
    {
        $response = $this->delete(route('vulnerability.destroy', [
            'vulnerability' => $this->vulnerability->id
        ]));

        $this->assertSoftDeleted('vulnerabilities', $this->vulnerability->toArray());

        $response->assertOk();
    }
}
